---
title: "AFLW Fantasy Top Coaches"
execute:
  echo: false
freeze: true
---

```{r}
#| message: false

library(modules)
library(arrow)
library(reactable)
library(dplyr)
library(tidyr)
library(purrr)
library(scales)
library(htmltools)

source("../../parameters.R")
linked_icons <- use("../../modules/linked_icons.R")

ranking_data <- read_parquet("https://github.com/bit-in-that/data-automation/raw/main/aflw_fantasy/data/processed/ranking_data.parquet")

round_number <- ranking_data |> 
    slice(1) |> 
    with(totalPoints/averagePoints) |> 
    round(digits = 0) |> 
    as.integer()


ranking_data <- ranking_data |> 
  mutate( 
    img_url = paste0("https://aflwfantasy.afl/media/avatars/user/", userId, ".png?v=1"),
    fantasy_url = paste0("https://aflwfantasy.afl/user/team/", round_number,"/", userId),
    value_rank = rank(-teamValue, ties.method = "first")
  ) 


ranking_data_previous <- read_parquet("https://github.com/bit-in-that/data-automation/raw/main/aflw_fantasy/data/processed/ranking_data_previous.parquet") |> 
  select(totalPoints, overallRank, userId)

ranking_data <- ranking_data |> 
  left_join(
    ranking_data_previous |> select(overallRank, totalPoints_previous_rank = totalPoints),
    by = "overallRank"
  ) |>
  left_join(
    ranking_data_previous |> select(userId, previous_overall_rank = overallRank),
    by = "userId"
  ) |>
  mutate(
    rank_change = previous_overall_rank - overallRank,
    points_to_maintain = c(tail(totalPoints, n = -1), NA) - totalPoints_previous_rank
  )

content_creators_ranks <- read_parquet("https://github.com/bit-in-that/data-automation/raw/main/aflw_fantasy/data/processed/content_creators_ranks_aflw.parquet") |>
mutate( 
    img_url = paste0("https://aflwfantasy.afl/media/avatars/user/", user_id, ".png?v=1"),
    fantasy_url = paste0("https://aflwfantasy.afl/user/team/", round_number,"/", team_id_2023)
  ) |> 
  select("team_name", "overall_rank", "total_points", "roundRank", "roundPoints", "name", "individual_url", "organisation", "twitter", "facebook", "website", "YouTube", "spotify", "primary_url", "img_url", "fantasy_url", "user_id") |> 
  arrange(overall_rank)


```

Note that all the information below is as at **round `r round_number`** of the 2023 AFLW season.



# {{< fa gauge-high >}} Overall Rank Pace

"Maintain" below means the number of points the previous holder of the borderline position would have required to hold their rank.

```{r}
rank_pace <- tibble(
  overallRank = c(1, 100, 1000 * (1:10)),
  rank_label = c("First🚗", "100🧢", number(1000 * (1:10), big.mark = ","))
) |> 
  mutate(
    ranks_df = map2(c(1, head(overallRank, n = -1)), overallRank, ~ {
      ranking_data |> 
        slice(.x:.y) |> 
        select(totalPoints, roundPoints, roundRank, teamValue, rank_change, points_to_maintain) |> 
        summarise(
          total_points = min(totalPoints),
          points_to_maintain = tail(points_to_maintain, n = 1),
          best_round_points = max(roundPoints),
          worst_round_points = min(roundPoints),
          mean_round_points = round(mean(roundPoints), digits = 0),
          best_round_rank = min(roundRank),
          worst_round_rank = max(roundRank),
          average_round_rank = round(mean(roundRank), digits = 0),
          best_rank_increase = max(rank_change),
          worst_rank_decrease = min(rank_change),
          average_rank_change = round(mean(rank_change), digits = 0),
          average_value = mean(teamValue),
          min_value = min(teamValue),
          max_value = max(teamValue)
        )
      })
  ) |> 
  unnest(ranks_df)

rank_pace |> 
  reactable(
    columns = list(
      overallRank = colDef(
        name = "Rank", 
        width = 80, 
        sticky = "left",
        cell = function(cell_value, row_index, column_name) {
          rank_pace[["rank_label"]][[row_index]]
        }),
      total_points = colDef(name = "Points", width = 75, format = colFormat(separators = TRUE)),
      mean_round_points = colDef(name = "Average", width = 80, format = colFormat(separators = TRUE)),
      best_round_points = colDef(name = "Best", width = 75, format = colFormat(separators = TRUE)),
      worst_round_points = colDef(name = "Worst", width = 75, format = colFormat(separators = TRUE)),
      points_to_maintain = colDef(name = "Maintain", width = 85, format = colFormat(separators = TRUE)),
      average_value = colDef(name = "Average", width = 100, cell = \(cell_value) paste0("$", round(cell_value/1000000, 3), "m")),
      min_value = colDef(name = "Min", width = 100, cell = \(cell_value) paste0("$", round(cell_value/1000000, 3), "m")),
      max_value = colDef(name = "Max", width = 100, cell = \(cell_value) paste0("$", round(cell_value/1000000, 3), "m")),
      best_rank_increase = colDef(name = "Best", width = 75, format = colFormat(separators = TRUE)),
      worst_rank_decrease = colDef(name = "Worst", width = 75, format = colFormat(separators = TRUE)),
      average_rank_change = colDef(name = "Average", width = 80, format = colFormat(separators = TRUE)),
      best_round_rank = colDef(name = "Best", width = 75, format = colFormat(separators = TRUE)),
      worst_round_rank = colDef(name = "Worst", width = 75, format = colFormat(separators = TRUE)),
      average_round_rank = colDef(name = "Average", width = 80, format = colFormat(separators = TRUE)),
      rank_label = colDef(show = FALSE)
    ),
    columnGroups = list(
      colGroup(name = paste0("Round ", round_number," Points"), columns = c("mean_round_points", "points_to_maintain", "best_round_points", "worst_round_points")),
      colGroup(name = paste0("Round ", round_number," Rank"), columns = c("best_round_rank", "worst_round_rank", "average_round_rank")),
      colGroup(name = "Change In Overall Rank", columns = c("best_rank_increase", "worst_rank_decrease", "average_rank_change")),
      colGroup(name = "Team Value", columns = c("average_value", "min_value", "max_value"))
      ),
    filterable = TRUE,
    pagination = FALSE
  )

```


# {{< fa bullhorn >}} High Profile

Check out the track records of podcast hosts and other high profile coaches below.

```{r}
content_creators_ranks |> 
  select(-user_id) |> 
  reactable(
    columns = list(
      team_name = colDef(
        name = "Fantasy Team",
        sticky = "left",
        cell = function(cell_value, row_index, column_name) {
          img_url <- content_creators_ranks[["img_url"]][[row_index]]
          fantasy_url <- content_creators_ranks[["fantasy_url"]][[row_index]]
          tags$a(
            tags$img(src = img_url, style = "height: 24px;width: 24px;"),
            " ",
            cell_value,
            href = fantasy_url, 
            target = "_blank"
            )
        },
        width = 200
      ),
      name = colDef(
        name = "Person",
        cell = function(cell_value, row_index, column_name) {
          individual_url <- content_creators_ranks[["individual_url"]][[row_index]]
          tags$a(
            cell_value,
            href = individual_url,
            target = "_blank"
            )
        },
        width = 175
      ),
      organisation = colDef(
        name = "Name",
        cell = function(cell_value, row_index, column_name) {
          primary_url <- content_creators_ranks[["primary_url"]][[row_index]]
          tags$a(
            cell_value,
            href = primary_url,
            target = "_blank"
            )
        },
        width = 200
      ),
      primary_url = colDef(
        name = "Links",
        cell = function(cell_value, row_index, column_name) {
          twitter <- content_creators_ranks[["twitter"]][[row_index]]
          facebook <- content_creators_ranks[["facebook"]][[row_index]]
          website <- content_creators_ranks[["website"]][[row_index]]
          YouTube <- content_creators_ranks[["YouTube"]][[row_index]]
          spotify <- content_creators_ranks[["spotify"]][[row_index]]
          
          tagList(
            if(isFALSE(twitter == "")) linked_icons$linked_twitter_icon(twitter) else NULL,
            if(isFALSE(facebook == "")) linked_icons$linked_facebook_icon(facebook) else NULL,
            if(isFALSE(website == "")) linked_icons$linked_globe_icon(website) else NULL,
            if(isFALSE(YouTube == "")) linked_icons$linked_youtube_icon(YouTube) else NULL,
            if(isFALSE(spotify == "")) linked_icons$linked_spotify_icon(spotify) else NULL
          )
        },
        width = 120
      ),
      overall_rank = colDef(name = "Rank", width = 75, format = colFormat(separators = TRUE)),
      total_points = colDef(name = "Points", width = 75, format = colFormat(separators = TRUE)),
      roundRank = colDef(name = "Rank", width = 75, format = colFormat(separators = TRUE)),
      roundPoints = colDef(name = "Points", width = 100, format = colFormat(separators = TRUE)),
      individual_url = colDef(show = FALSE),
      twitter = colDef(show = FALSE),
      facebook = colDef(show = FALSE),
      website = colDef(show = FALSE),
      YouTube = colDef(show = FALSE),
      spotify = colDef(show = FALSE),
      img_url = colDef(show = FALSE),
      fantasy_url = colDef(show = FALSE)
    ),
    columnGroups = list(
      colGroup(name = "Overall", columns = c("overall_rank", "total_points")),
      colGroup(name = paste("Round", round_number), columns = c("roundRank", "roundPoints")),
      colGroup(name = "Organisation", columns = c("organisation", "twitter", "facebook", "website", "YouTube", "spotify", "primary_url"))
      ),
    filterable = TRUE
  )


```




# {{< fa hat-wizard >}} Highest Performers

::: {.panel-tabset}

## Top 1000 Rank 🧢

```{r}
overall_rank_data <- ranking_data |> 
  filter(
    overallRank %in% 1:1000
  ) |> 
  arrange(overallRank)

overall_rank_data |> 
  select(teamName, overallRank, totalPoints, roundRank, roundPoints, teamValue, value_rank) |> 
    reactable(
    columns = list(
      teamName = colDef(
        name = "Fantasy Team",
        sticky = "left",
        cell = function(cell_value, row_index, column_name) {
          img_url <- overall_rank_data[["img_url"]][[row_index]]
          fantasy_url <- overall_rank_data[["fantasy_url"]][[row_index]]
          tags$a(
            tags$img(src = img_url, style = "height: 24px;width: 24px;"),
            " ",
            cell_value,
            href = fantasy_url, 
            target = "_blank"
            )
        },
        width = 200
      ),
      overallRank = colDef(name = "Rank", width = 75, format = colFormat(separators = TRUE)),
      totalPoints = colDef(name = "Points", width = 75, format = colFormat(separators = TRUE)),
      roundRank = colDef(name = "Rank", width = 75, format = colFormat(separators = TRUE)),
      roundPoints = colDef(name = "Points", width = 75, format = colFormat(separators = TRUE)),
      teamValue = colDef(name = "Amount", width = 100, cell = \(cell_value) paste0("$", cell_value/1000000, "m")),
      value_rank = colDef(name = "Rank", width = 75, format = colFormat(separators = TRUE))
    ),
    columnGroups = list(
      colGroup(name = "Overall", columns = c("overallRank", "totalPoints")),
      colGroup(name = paste("Round", round_number), columns = c("roundRank", "roundPoints")),
      colGroup(name = "Team Value", columns = c("teamValue", "value_rank"))
      ),
    filterable = TRUE
  )


```

## Top 1000 Week 🏈


```{r}

round_rank_data <- ranking_data |> 
  filter(
    roundRank %in% 1:1000
  ) |> 
  arrange(roundRank)

round_rank_data |> 
  select(teamName, roundRank, roundPoints, overallRank, totalPoints, teamValue, value_rank) |>
    reactable(
    columns = list(
      teamName = colDef(
        name = "Fantasy Team",
        sticky = "left",
        cell = function(cell_value, row_index, column_name) {
          img_url <- round_rank_data[["img_url"]][[row_index]]
          fantasy_url <- round_rank_data[["fantasy_url"]][[row_index]]
          tags$a(
            tags$img(src = img_url, style = "height: 24px;width: 24px;"),
            " ",
            cell_value,
            href = fantasy_url, 
            target = "_blank"
            )
        },
        width = 200
      ),
      overallRank = colDef(name = "Rank", width = 75, format = colFormat(separators = TRUE)),
      totalPoints = colDef(name = "Points", width = 75, format = colFormat(separators = TRUE)),
      roundRank = colDef(name = "Rank", width = 75, format = colFormat(separators = TRUE)),
      roundPoints = colDef(name = "Points", width = 75, format = colFormat(separators = TRUE)),
      teamValue = colDef(name = "Amount", width = 100, cell = \(cell_value) paste0("$", cell_value/1000000, "m")),
      value_rank = colDef(name = "Rank", width = 75, format = colFormat(separators = TRUE))
    ),
    columnGroups = list(
      colGroup(name = "Overall", columns = c("overallRank", "totalPoints")),
      colGroup(name = paste("Round", round_number), columns = c("roundRank", "roundPoints")),
      colGroup(name = "Team Value", columns = c("teamValue", "value_rank"))
      ),
    filterable = TRUE
  )


```

## Top 100 Value 🤑


```{r}
value_data <- ranking_data |> 
  filter(
    value_rank %in% 1:1000
  ) |> 
  arrange(
    value_rank
  ) 

value_data |>
  select(teamName, teamValue, value_rank, overallRank, totalPoints, roundRank, roundPoints) |> 
  reactable(
    columns = list(
      teamName = colDef(
        name = "Fantasy Team",
        sticky = "left",
        cell = function(cell_value, row_index, column_name) {
          img_url <- value_data[["img_url"]][[row_index]]
          fantasy_url <- value_data[["fantasy_url"]][[row_index]]
          tags$a(
            tags$img(src = img_url, style = "height: 24px;width: 24px;"),
            " ",
            cell_value,
            href = fantasy_url, 
            target = "_blank"
            )
        },
        width = 200
      ),
      overallRank = colDef(name = "Rank", width = 75, format = colFormat(separators = TRUE)),
      totalPoints = colDef(name = "Points", width = 75, format = colFormat(separators = TRUE)),
      roundRank = colDef(name = "Rank", width = 75, format = colFormat(separators = TRUE)),
      roundPoints = colDef(name = "Points", width = 75, format = colFormat(separators = TRUE)),
      teamValue = colDef(name = "Amount", width = 100, cell = \(cell_value) paste0("$", cell_value/1000000, "m")),
      value_rank = colDef(name = "Rank", width = 75, format = colFormat(separators = TRUE))
    ),
    columnGroups = list(
      colGroup(name = "Overall", columns = c("overallRank", "totalPoints")),
      colGroup(name = paste("Round", round_number), columns = c("roundRank", "roundPoints")),
      colGroup(name = "Team Value", columns = c("teamValue", "value_rank"))
      ),
    filterable = TRUE
  )


```


:::
