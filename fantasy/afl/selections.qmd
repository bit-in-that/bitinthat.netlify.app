---
title: "AFL Fantasy Player Selections"
execute:
  echo: false
  warning: false
---

<!-- TODO:
Add the selections, the % of coaches who pick players as C or VC, bench, emergency etc.
Add a plotly for number of coaches, completion % etc. 
during the season adding up trades in and out to see how many people are actively playing
-->



```{r}

library(arrow)
library(dplyr)
library(ggplot2)
library(plotly)
library(htmltools)
library(purrr)
library(reactable)

```


## Plot

```{r}
update_plotly_legend_labels <- function(plotly_object, legend_labels) {
  plotly_list <- plotly_build(plotly_object)
  
  # Throw an error if the names of the series don't match up
  stopifnot(length(plotly_list$x$data) == length(legend_labels))
  
  for(index in seq_along(legend_labels)) {
    plotly_list$x$data[[index]]$name <- legend_labels[[index]]
  }
  
  plotly_build(plotly_list)
}

player_selections_plot <- read_parquet("https://github.com/bit-in-that/data-automation/raw/main/afl_fantasy/data/processed/2024/player_selections_long.parquet") |> 
    mutate(
      direction = if_else(owned_by_adjusted_diff>0, "Daily Increase", "Daily Decrease"),
      snapshot_label = "Snapshot"
    ) |> 
    mutate(
    snapshot_date = as.Date(snapshot_time, tz = "Australia/Sydney") - 1,
    full_name = paste(first_name, last_name)
  )


player_id_list <- player_selections_plot |>
  distinct(id, .keep_all = TRUE) |>
  with({
    `names<-`(id, full_name)
  })


```

<!-- TODO: Make the plot able to swap out the metric (adjusted versus official ownership) as well as the player. Or alternatively two sperate plots might be simpler. -->


```{r}
player_selections_plot |>
  distinct(id, .keep_all = TRUE) |>
  transmute(
    id,
    full_name = paste(first_name, last_name)
  ) |> 
  with({
    map2(id, full_name, ~{
      tags$option(value = .x, .y)
    })
  }) |> 
  c(id = "player-select") |> 
  do.call(what = tags$select) |> 
  div(id = "select-container")


```


```{r}
gg <- player_selections_plot |>
  filter(
    id == player_selections_plot$id[[1]]
  ) |> 
  ggplot(aes(x = snapshot_date, y = owned_by_adjusted)) +
  geom_col(aes(y = owned_by_adjusted_diff, fill = direction)) +
  geom_point(aes(y = owned_by_adjusted_diff, colour = direction)) +
  geom_line(aes(colour = "Snapshot")) +
  geom_point(aes(colour = "Snapshot")) +
  xlab("Snapshot Date (End of Day)") +
  ylab("Owned by % (adjusted)") +
  scale_colour_manual(
    name = "Legend",
    values = c("Snapshot" = "#333333", "Daily Increase" = "#017720", "Daily Decrease" = "#AA0000")
  ) +
  scale_fill_manual(
    name = "",
    values = c("Daily Increase" = "green", "Daily Decrease" = "red")
  ) +
  # labs(title = "Player Name (Team), $000k (position)") + # add this later
  labs(title = player_selections_plot$full_name[1]) + # add this later
  theme_minimal()
  
p <- ggplotly(gg) |> 
  # This was bit of a hack but it works!
  update_plotly_legend_labels(c("Daily Decrease", "Daily Increase", "Daily Decrease", "Daily Increase", "Snapshot"))

p$elementId <- "plotly_plot"

p
```


## Table

<!-- Add a table in another table of people signed up and completed teams, could also be a plot maybe with two shaded regions -->

::: {.panel-tabset}

### Players


```{r}
player_selections_table <- player_selections_plot |> 
  group_by(
    id, full_name
  ) |> 
  mutate(
    days_ago = max(snapshot_date) - snapshot_date + 1
  ) |> 
  summarise(
    owned_by_max = max(owned_by),
    owned_by_adjusted_max = max(owned_by_adjusted),
    owned_by_adjusted_which_max = which.max(owned_by_adjusted),
    owned_by_adjusted_max_date = snapshot_date[owned_by_adjusted_which_max],
    owned_by = tail(owned_by, 1),
    owned_by_adjusted_now = tail(owned_by_adjusted, 1),
    change_yesterday = tail(owned_by_adjusted_diff, 1),
    change_week = sum(tail(owned_by_adjusted_diff, 7)),
    change_which_max = which.max(abs(tail(owned_by_adjusted_diff, -1)))[1] + 1,
    change_max = owned_by_adjusted_diff[change_which_max],
    change_max_date = snapshot_date[change_which_max],
    percent_change_yesterday = owned_by_adjusted[n()]/owned_by_adjusted[n() - 1] - 1,
    percent_change_week = owned_by_adjusted[n()]/owned_by_adjusted[n() - 6] - 1,
    selections_adjusted_diff_yesterday = tail(selections_adjusted_diff, 1),
    selections_adjusted_diff_week = sum(tail(selections_adjusted_diff, 7)),
    selections_adjusted_diff_which_max = which.max(tail(selections_adjusted_diff,-1)) + 1,
    selections_adjusted_diff_max = selections_adjusted_diff[selections_adjusted_diff_which_max],
    selections_adjusted_diff_max_date = snapshot_date[selections_adjusted_diff_which_max],
    gradient = mean(tail(owned_by_adjusted_diff, -1)),
    .groups = "drop"
  ) |> 
  select(-change_which_max, -owned_by_adjusted_which_max, -selections_adjusted_diff_which_max) |> 
  relocate(owned_by, owned_by_adjusted_now, .after = "full_name") |> 
  arrange(desc(owned_by))


player_selections_table |> 
  reactable(
    columns = list(
      id = colDef(show = FALSE),
      full_name = colDef(name = "Player", sticky = "left", cell = \(cell_value, row_index) {
        id <- player_selections_table$id[[row_index]]
        tags$a(cell_value, href = paste0("?playerid=", id, "#plot"))
      }),
      owned_by = colDef(name = "Official"),
      owned_by_adjusted_now = colDef(name = "Adjusted"),
      owned_by_max = colDef(name = "Official"),
      owned_by_adjusted_max = colDef(name = "Adjusted"),
      owned_by_adjusted_max_date = colDef(name = "Date", format = colFormat(date = TRUE)),
      change_yesterday = colDef(name = "Yesterday", format = colFormat(digits = 2)),
      change_week = colDef(name = "Past Week", format = colFormat(digits = 2)),
      change_max = colDef(name = "Peak Day", format = colFormat(digits = 2)),
      change_max_date = colDef(name = "Date", format = colFormat(date = TRUE)),
      percent_change_yesterday = colDef(name = "Yesterday", format = colFormat(percent = TRUE, digits = 2)),
      percent_change_week = colDef(name = "Past Week", format = colFormat(percent = TRUE, digits = 2)),
      selections_adjusted_diff_yesterday = colDef("Yesterday", format = colFormat(separators = TRUE)),
      selections_adjusted_diff_week = colDef("Week", format = colFormat(separators = TRUE)),
      selections_adjusted_diff_max = colDef("Peak", format = colFormat(separators = TRUE)),
      selections_adjusted_diff_max_date = colDef("Date", format = colFormat(date = TRUE)),
      gradient = colDef(name = "Gradient", format = colFormat(digits = 5))
    ),
    columnGroups = list(
      colGroup(name = "Current Ownership", columns = c("owned_by", "owned_by_adjusted_now")),
      colGroup(name = "Peak Ownership", columns = c("owned_by_max", "owned_by_adjusted_max", "owned_by_adjusted_max_date")),
      colGroup(name = "Change in Adjusted Ownership", columns = c("change_yesterday", "change_week", "change_max", "change_max_date")),
      colGroup(name = "% Change", columns = c("percent_change_yesterday", "percent_change_week")),
      colGroup(name = "Change in Absolute Selections (Adjusted)", columns = c("selections_adjusted_diff_yesterday", "selections_adjusted_diff_week", "selections_adjusted_diff_max", "selections_adjusted_diff_max_date"))
    ),
    filterable = TRUE
  )




```

### Fantasy Coaches

```{r}

player_selections_plot |> 
  group_by(snapshot_date) |> 
  summarise(
    fantasy_coaches = head(fantasy_coaches, 1),
    fantasy_coaches_diff = head(fantasy_coaches_diff, 1),
    completion_percentage = head(completion_percentage, 1),
    sum_trades = round(sum(abs(selections_adjusted_diff))/2, 0),
    .groups = "drop"
  ) |>
  mutate(
    turnover = round(sum_trades / lag(fantasy_coaches), 3)
  ) |> 
  arrange(desc(snapshot_date)) |> 
  reactable(
    columns = list(
      snapshot_date = colDef(name  = "Date"),
      fantasy_coaches = colDef(name  = "Count", format = colFormat(separators = TRUE)),
      fantasy_coaches_diff = colDef(name  = "Increase", format = colFormat(separators = TRUE)),
      completion_percentage = colDef(name = "Completion", format = colFormat(percent = TRUE, digits = 1)),
      sum_trades = colDef(name = "Count", format = colFormat(separators = TRUE)),
      turnover = colDef(name = "Turnover", format = colFormat(percent = TRUE, digits = 1))
    ),
    columnGroups = list(
      colGroup(name = "Fantasy Coaches", columns = c("fantasy_coaches", "fantasy_coaches_diff")),
      colGroup(name = "Turnover", columns = c("sum_trades", "turnover"))
    ),
    filterable = TRUE
  )


```



:::


## Explanation

When people look at the ownership percentages for AFL fantasy, they often wonder why the most selected players are all below 70%. The reason for this is that a lot of teams are either missing players or are entirely empty. Fortunately there is a solution to this, I have devised the following formula to calculate a player's true selected number:

$$
(\text{Adjusted \% Selected By}) = \frac{(\text{\% Selected By}) } { (\text{Overall Team Completion \%}) }
$$

where:

$$
(\text{Overall Team Completion \%}) = \frac{ \sum (\text{\# Selections})}{  30 \times (\text{\# Coaches}) }
$$


This is a rough approximation but it leads to the most selected player (Harley Reid) being close to 100% at this stage.






```{=html}

<!-- Linking Selectize CSS -->
<link href="https://cdnjs.cloudflare.com/ajax/libs/selectize.js/0.12.6/css/selectize.bootstrap3.min.css" rel="stylesheet" />


<!-- JavaScript to Initialize Selectize -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/selectize.js/0.12.6/js/standalone/selectize.min.js"></script>
<script>

//var selectedDataset = document.getElementById('player-select').value;

update_plotly_plot = function(player_id) {
  if(!(player_id == '')) {
  
  fetch("json_data/owned_by_adjusted_plot_data.json")
    .then(response => response.json())
    .then(data => {
      // Convert the data to the format Plotly expects
      data_player = data[player_id];
      //console.log(data_player);
      Plotly.restyle('plotly_plot', 'x', [data_player['daily_decrease_x']], [0,2]);
      Plotly.restyle('plotly_plot', 'y', [data_player['daily_decrease_y_abs']], [0]);
      Plotly.restyle('plotly_plot', 'base', [data_player['daily_decrease_y']], [0]);
      Plotly.restyle('plotly_plot', 'y', [data_player['daily_decrease_y']], [2]);
      Plotly.restyle('plotly_plot', 'text', [data_player['daily_decrease_text']], [0,2]);
      Plotly.restyle('plotly_plot', 'x', [data_player['daily_increase_x']], [1,3]);
      Plotly.restyle('plotly_plot', 'y', [data_player['daily_increase_y']], [1,3]);
      Plotly.restyle('plotly_plot', 'text', [data_player['daily_increase_text']], [1,3]);
      Plotly.restyle('plotly_plot', 'x', [data_player['snapshot_x']], [4]);
      Plotly.restyle('plotly_plot', 'y', [data_player['snapshot_y']], [4]);
      Plotly.restyle('plotly_plot', 'text', [data_player['snapshot_text']], [4]);
      
      Plotly.relayout('plotly_plot', {
        'title': data_player['full_name'][0],
        'xaxis.autorange': true,
        'yaxis.autorange': true,
        'yaxis.dtick': data_player['tick_interval'][0]
        
      });
      
      //console.log(document.getElementById('plotly_plot').data);
  
    });
    }
      

};

document.addEventListener('DOMContentLoaded', function() {
  // Create a URLSearchParams instance from the current URL's query string
  const queryParams = new URLSearchParams(window.location.search);
  // Get the 'playerId' query parameter
  const playerId = queryParams.get('playerid');

  if(playerId) {
  
    update_plotly_plot(playerId);
  };
  

  $('#player-select').selectize({
    // options and callbacks here
    onChange: function(value){
      // console.log(value);
      update_plotly_plot(value);
    }
    });
  });
</script>


```

